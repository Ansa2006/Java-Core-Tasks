DAY 3
BANK ACCOUNT
public class BankAccount {
    private double balance;
    public BankAccount(double initialBalance) {
        if (initialBalance >= 0) {
            balance = initialBalance;
        } else {
            balance = 0;
            System.out.println("Initial balance can't be negative. Set to 0.");
        }
    }
    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited: $" + amount);
        } else {
            System.out.println("Deposit amount must be positive.");
        }
    }

    public void withdraw(double amount) {
        if (amount > 0) {
            if (amount <= balance) {
                balance -= amount;
                System.out.println("Withdrawn: $" + amount);
            } else {
                System.out.println("Insufficient balance. Withdrawal failed.");
            }
        } else {
            System.out.println("Withdrawal amount must be positive.");
        }
    }

    
    public double getBalance() {
        return balance;
    }  
    public static void main(String[] args) {
        BankAccount account = new BankAccount(1000);  // Start with $1000
        System.out.println("Initial balance: $" + account.getBalance());

        account.deposit(500);    // Deposit $500
        System.out.println("Balance after deposit: $" + account.getBalance());

        account.withdraw(300);   // Withdraw $300
        System.out.println("Balance after withdrawal: $" + account.getBalance());

        account.withdraw(1500);  // Try to withdraw more than balance
        System.out.println("Final balance: $" + account.getBalance());
    }
}


EMPLOYEE CLASS

class Person {
    private String name;
    private int age;
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }
}
class Employee extends Person {
    private double basicSalary;
    private double bonus;
   public Employee(String name, int age, double basicSalary, double bonus) {
        super(name, age);
        this.basicSalary = basicSalary;
        this.bonus = bonus;
    }   
    public double calculateSalary() {
        return basicSalary + bonus;
    }
    public void displayEmployeeDetails() {
        System.out.println("Name: " + getName());
        System.out.println("Age: " + getAge());
        System.out.println("Basic Salary: $" + basicSalary);
        System.out.println("Bonus: $" + bonus);
        System.out.println("Total Salary: $" + calculateSalary());
    }
}
public class PersonEmployeeDemo {
    public static void main(String[] args) {
       
        Employee emp = new Employee("Alice", 30, 5000.0, 1200.0);

      
        emp.displayEmployeeDetails();
    }
}


OVERLOADING
public class OverloadingDemo {
   public static int sum(int a, int b) {
        return a + b;
    }
    public static double sum(double a, double b) {
        return a + b;
    }

    public static void main(String[] args) {
        int intSum = sum(5, 10);
        double doubleSum = sum(5.5, 3.3);

        System.out.println("Sum of integers: " + intSum);       // Output: 15
        System.out.println("Sum of doubles: " + doubleSum);     // Output: 8.8
    }
}
